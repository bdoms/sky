#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs-extra')
  , path = require('path')
  , next = require('nextflow')
  , sky = require('../lib/sky')
  , ejs = require('ejs')
  , _ = require('underscore')
  , S = require('string')
  , mdwalker = require('markdown-walker')
  , batch = require('batchflow')
  , MarkdownPage = require('markdown-page').MarkdownPage
  , dt = require('date-tokens')
  , P = require('autoresolve')
  , cl = require('cl')
  , RSS = require('rss')
  , colors = require('colors')

var BATCH_LIMIT = 32
  , _tmplSettings = {interpolate : /\{\{(.+?)\}\}/g} //parse Sky config

program.version(require('../package'))
  .option('-d, --dir [outputDir]', 'The output directory for the files.')
  .parse(process.argv)

if (program.dir) process.chdir(program.dir)

sky.findBaseDir(function(dir) {
  if (!dir) cl.exit(100,"Can't find the sky/config.json. Are you sure you're in a Sky site?")
  
  var configs = sky.loadConfigsSync(dir)
  if (configs.errors['config']) cl.exit(101, 'Could not parse sky/config.json. Is there an error in the JSON?')

  buildAllArticles(dir, configs)
})

function buildAllArticles (baseDir, configs) {
  console.log('Starting to build...')
  var outputDir = ''
    , blogTemplate =  configs.get('config:blog.template') || 'basic'

  if (configs.get('config:build.outputDir')) 
    outputDir = path.join(baseDir, configs.get('config:build.outputDir'))
  else
    outputDir = path.join(baseDir, 'public')
  outputVendorDir = path.join(outputDir, 'vendor')

  if (!fs.existsSync(outputDir)) fs.mkdirsSync(outputDir)
  if (!fs.existsSync(outputVendorDir)) fs.mkdirsSync(outputVendorDir)

  var files = []
    , fileStats = []
    , data = {S: S, _: _, sky: configs.config, self: {}, cache: false}

  //set homepage
  data.sky.homepage = 'https://github.com/skywrite'

  //url formats
  var articleUrlFormat = configs.get('config:articles.urlformat') || "articles/{{date-year}}/{{date-month}}/{{slug}}.html"
  var indexFile = configs.get("config:articles.index") || "index.html"

  //check existence of templateDir
  var templateDir = path.join(baseDir, 'sky', 'templates', blogTemplate)
  if (!fs.existsSync(templateDir)) cl.exit(102, 'Could not find template. %s does not exist.', templateDir)

  var outputArticles = {}

  var flow = {};
  next(flow = {
    ERROR: function(err) {
      console.error(err)
      console.error(err.stack)
    },
    copyVendor: function() {
      console.log('Copying vendor directory...')
      fs.copy(P('vendor'), outputVendorDir, this.next)
    },
    iterateArticles: function() {
      mdwalker(path.join(baseDir, 'articles')).on('markdown', function(file, stat) {
        files.push(file); fileStats.push(stat)
      })
      .on('end', function() {
        batch(files).par(BATCH_LIMIT).each(function(i, file, next) {
          MarkdownPage.readFile(file, function(err, mdp) {
            if (err) return flow.error(err)
            
            if (mdp.metadata.publish) { //don't wont to publish drafts, thus -> no build either
              console.log('Building %s...', path.basename(file))
              data.self = {
                title: mdp.title,
                content: mdp.html
              }
              data.self = _(data.self).extend(mdp.metadata)
              data.self.createdAt = fileStats[i].ctime
              data.self.modifiedAt = fileStats[i].mtime
              data.self.publishedAt = new Date(data.self.publish).getTime()
              data.self.slug = data.self.slug || S(mdp.title).slugify()
              data.self.author = data.self.author || (configs.get('config:blog.author'))

              data.self = _(data.self).extend(dt.eval(mdp.metadata.publish, 'date-')) //add date-tokens
              //console.dir(data.self)
              //console.log(data.self['date-year'])

              //var relOutFile = _(articleUrlFormat).template(data.self, _tmplSettings)
              //var relOutFile = sutil.template(articleUrlFormat, data.self)
              var relOutFile = S(articleUrlFormat).template(data.self).s
              //console.log(relOutFile)
              var absOutFile = path.join(outputDir, relOutFile)
              //console.log(absOutFile)

              data.self.relativePath = relOutFile

              //render templates
              var articleTemplateFile = path.join(templateDir, 'article', 'article.ejs.html')
              var layoutTemplateFile = path.join(templateDir, 'layout.ejs.html')
              //var indexTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'article', 'index.ejs.html')

              data.filename = articleTemplateFile//absOutFile //ejs option
              data.sky.view = ejs.render(fs.readFileSync(articleTemplateFile, 'utf8'), data)

              //data.filename
              data.filename = layoutTemplateFile 
              var html = ejs.render(fs.readFileSync(layoutTemplateFile, 'utf8'), data)

              //fill in mustache templates if exist, this method is a bit hacky, but it helps self-reference disqus slugs
              html = S(html).template(data.self).s

              fs.outputFileSync(absOutFile, html)
              outputArticles[file] = JSON.parse(JSON.stringify(data.self)) //poor mans clone
            }
            next()
          })
        })
        .error(function(err) {
          console.log('ERROR')
          flow.error(err)
        })
        .end(function() {
          flow.next()
        });
      })
    },
    generateIndex: function() {
      console.log('Generating index...')
      var indexTemplateFile = path.join(templateDir, 'article', 'index.ejs.html')
      var layoutTemplateFile = path.join(templateDir, 'layout.ejs.html')
     
      data.self.author = data.self.author || (configs.get('config:blog.author'))
      delete data.self.title

      if (configs.get('config:blog.name')) {
        data.self.title = configs.get('config:blog.name')
        if (configs.get('config:blog.tagline'))
          data.self.title += ': ' + configs.get('config:blog.tagline')
      }
      data.self.title = data.self.title || 'Sky Blog'

      data.self.outputArticles = outputArticles;
      //console.dir(outputArticles)
      data.filename = indexTemplateFile
      data.sky.view = ejs.render(fs.readFileSync(indexTemplateFile, 'utf8'), data);

      //generate RSS
      var articles = []
      Object.keys(outputArticles).forEach(function(file) {
        articles.push(outputArticles[file])
      })
      articles = _(articles).chain().sortBy(function(a) {
        return -a.publishedAt
      }).take(10).value()

      var feed = new RSS({
        title: configs.get('config:blog.name'),
        description: configs.get('config:blog.tagline'),
        feed_url: configs.get('config:blog.url') + '/rss.xml',
        site_url: configs.get('config:blog.url'),
        //image_url: 'http://example.com/icon.png',
        author: configs.get('config:blog.author')
      });

    
      articles.forEach(function(a) {
        feed.item({
          title:  a.title,
          description: a.content,
          url: configs.get('config:blog.url') + '/' + a.relativePath, // link to the item
          //guid: '1123', // optional - defaults to url
          author: a.author,
          date: a.publish
        });
      })
      
      // cache the xml
      var xml = feed.xml()

      fs.outputFileSync(path.join(outputDir, 'rss.xml'), xml)




      var absIndexFile = path.join(outputDir, indexFile)
      console.log(absIndexFile)
      data.filename = layoutTemplateFile
      var html = ejs.render(fs.readFileSync(layoutTemplateFile, 'utf8'), data)
      fs.outputFileSync(absIndexFile, html)
      console.log('Done.')
    }
  })
}
