#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs-extra')
  , path = require('path')
  , next = require('nextflow')
  , sky = require('../lib/sky')
  , cli = require('../lib/cli')
  , ejs = require('ejs')
  , _ = require('underscore')
  , S = require('string')
  , mdwalker = require('markdown-walker')
  , batch = require('batchflow')
  , MarkdownPage = require('markdown-page').MarkdownPage
  , dt = require('date-tokens')
  , P = require('autoresolve')

var BATCH_LIMIT = 32
  , _tmplSettings = {interpolate : /\{\{(.+?)\}\}/g} //parse Sky config

program.version(require('../package'))
  .option('-d, --dir [outputDir]', 'The output directory for the files.')
  .parse(process.argv)

sky.findBaseDir(function(dir) {
  if (!dir) cli.exit(100,"Can't find the sky/config.json. Are you sure you're in a Sky site?")
  buildAllArticles(dir)
})

function buildAllArticles (baseDir) {
  console.log('Starting to build...')
  var configFile = path.join(baseDir, 'sky', 'config.json')
    , config = fs.readJsonSync(configFile)
    , outputDir = ''
    , outputVendorDir = path.join(outputDir, 'vendor')
    , blogTemplate = (config && config.blog && config.blog.template) || 'basic'

  if (program.dir)
    outputDir = program.dir
  else if (config && config.build && config.build.outputDir) 
    outputDir = path.join(baseDir, config.build.outputDir)
  else
    outputDir = path.join(baseDir, 'public')

  if (!fs.existsSync(outputDir)) fs.mkdirsSync(outputDir)
  if (!fs.existsSync(outputVendorDir)) fs.mkdirsSync(outputVendorDir)

  var files = []
    , fileStats = []
    , data = {S: S, _: _, sky: config, self: {}, cache: false}

  //set homepage
  data.sky.homepage = 'https://github.com/skywrite'

  //url formats
  var articleUrlFormat = (config && config.articles && config.articles.urlFormat) || "articles/{{date-year}}/{{date-month}}/{{slug}}.html"
  var indexFile = (config && config.articles && config.articles.index) || "articles/index.html"

  var outputArticles = {}

  var flow = {};
  next(flow = {
    ERROR: function(err) {
      console.error(err)
      console.error(err.stack)
    },
    copyVendor: function() {
      console.log('Copying vendor directory...')
      fs.copy(P('vendor'), outputVendorDir, this.next)
    },
    iterateArticles: function() {
      mdwalker(path.join(baseDir, 'articles')).on('markdown', function(file, stat) {
        files.push(file); fileStats.push(stat)
      })
      .on('end', function() {
        batch(files).par(BATCH_LIMIT).each(function(i, file, next) {
          MarkdownPage.readFile(file, function(err, mdp) {
            if (err) return flow.error(err)
            
            if (mdp.metadata.publish) { //don't wont to publish drafts, thus -> no build either
              console.log('Building %s...', file)
              data.self = {
                createdAt: fileStats[i].ctime,
                modifiedAt: fileStats[i].mtime,
                publishedAt: new Date(mdp.metadata.publish),
                publish: mdp.metadata.publish, 
                title: mdp.title,
                slug: mdp.metadata.slug || S(mdp.title).slugify(), //use slug in file if specified
                author: mdp.metadata.author || (config && config.blog && config.blog.author),
                content: mdp.html
              }
              data.self = _(data.self).extend(dt.eval(mdp.metadata.publish, 'date-')) //add date-tokens

              var relOutFile = _(articleUrlFormat).template(data.self, _tmplSettings)
              var absOutFile = path.join(outputDir, relOutFile)

              data.self.relativePath = relOutFile

              //render templates
              var articleTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'article', 'article.ejs.html')
              var layoutTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'layout.ejs.html')
              //var indexTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'article', 'index.ejs.html')

              data.filename = articleTemplateFile//absOutFile //ejs option
              data.sky.view = ejs.render(fs.readFileSync(articleTemplateFile, 'utf8'), data)

              //data.filename
              data.filename = layoutTemplateFile 
              var html = ejs.render(fs.readFileSync(layoutTemplateFile, 'utf8'), data)
              fs.outputFileSync(absOutFile, html)
              outputArticles[file] = data.self
              next()
            }
          })
        })
        .error(flow.error)
        .end(function() {
          flow.next()
        });
      })
    },
    generateIndex: function() {
      console.log('Generating index...')
      var indexTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'article', 'index.ejs.html')
      var layoutTemplateFile = path.join(baseDir, 'sky', 'templates', blogTemplate, 'layout.ejs.html')
     
      data.self = outputArticles;
      //console.dir(outputArticles)
      data.filename = indexTemplateFile
      data.sky.view = ejs.render(fs.readFileSync(indexTemplateFile, 'utf8'), data);

      var absIndexFile = path.join(outputDir, indexFile)
      data.filename = layoutTemplateFile
      var html = ejs.render(fs.readFileSync(layoutTemplateFile, 'utf8'), data)
      fs.outputFileSync(absIndexFile, html)
    }
  })
}
